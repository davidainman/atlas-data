valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, warnings, errors)
wide_no_derived <- processApprehensional(wide_no_derived, warnings, errors)
# make everything a character
wide_no_derived <- wide_no_derived %>% mutate(across(everything(), as.character))
# process for errors, reformat and write out
globalPreprocess(wide_no_derived, warnings, errors)
# TODO left off here
long_data <- convertToLong(wide_no_derived, codescsv)
long_data <- long_data[order(long_data$ID),]
valuescsv <- valuescsv[order(valuescsv$ID),]
all.equal(valuescsv, long_data, check.attributes = FALSE)
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, warnings, errors)
wide_no_derived <- processApprehensional(wide_no_derived, warnings, errors)
# make everything a character
wide_no_derived <- wide_no_derived %>% mutate(across(everything(), as.character))
# process for errors, reformat and write out
globalPreprocess(wide_no_derived, warnings, errors)
# TODO left off here
long_data <- convertToLong(wide_no_derived, codescsv)
long_data <- long_data[order(long_data$ID),]
valuescsv <- valuescsv[order(valuescsv$ID),]
all.equal(valuescsv, long_data, check.attributes = FALSE)
dplyr::filter(long_data, long_data$Value != valuescsv$Value)
dplyr::filter(long_data, is.na(long_data$Value) & !is.na(valuescsv$Value))
View(dplyr::filter(long_data, is.na(long_data$Value) & !is.na(valuescsv$Value)))
glotto="cadd1256"
source('nounposs.R')
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, warnings, errors)
wide_no_derived <- processApprehensional(wide_no_derived, warnings, errors)
# make everything a character
wide_no_derived <- wide_no_derived %>% mutate(across(everything(), as.character))
# process for errors, reformat and write out
globalPreprocess(wide_no_derived, warnings, errors)
# TODO left off here
long_data <- convertToLong(wide_no_derived, codescsv)
long_data <- long_data[order(long_data$ID),]
valuescsv <- valuescsv[order(valuescsv$ID),]
all.equal(valuescsv, long_data, check.attributes = FALSE)
dplyr::filter(long_data, long_data$Value != valuescsv$Value)
View(dplyr::filter(long_data, long_data$Value != valuescsv$Value))
View(dplyr::filter(long_data, long_data$Source != valuescsv$Source))
valuescsv$Source[valuescsv$ID == 'yura1255_ToneProm-09b']
long_data$Source[long_data$ID == 'yura1255_ToneProm-09b']
collapseSources(long_data$Source[long_data$ID == 'yura1255_ToneProm-09b'])
collapseSources(list(long_data$Source[long_data$ID == 'yura1255_ToneProm-09b']))
sourcesAsList<-long_data$Source[long_data$ID == 'yura1255_ToneProm-09b']
sources <- c()
retval <- c()
for (source in unlist(strsplit(sourcesAsList, ';'))) {
sources <- c(sources, trimws(gsub(':.*', '', source, perl=TRUE)))
}
sources
source('cldf-functions.R')
source('utils.R')
source('nounposs.R')
source('lat.R')
source('veluv.R')
source('glot.R')
source('cor.R')
source('toneprom.R')
source('syll.R')
source('ppron.R')
source('sgpl.R')
source('monpl.R')
source('wo.R')
source('attr.R')
source('gend.R')
source('soccaus.R')
source('dem.R')
source('appr.R')
source('nounposs.R')
source('align.R')
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, warnings, errors)
wide_no_derived <- processApprehensional(wide_no_derived, warnings, errors)
# make everything a character
wide_no_derived <- wide_no_derived %>% mutate(across(everything(), as.character))
# process for errors, reformat and write out
globalPreprocess(wide_no_derived, warnings, errors)
# TODO left off here
long_data <- convertToLong(wide_no_derived, codescsv)
long_data <- long_data[order(long_data$ID),]
valuescsv <- valuescsv[order(valuescsv$ID),]
all.equal(valuescsv, long_data, check.attributes = FALSE)
View(dplyr::filter(long_data, long_data$Source != valuescsv$Source))
View(dplyr::filter(long_data, long_data$Frequency != valuescsv$Frequency))
View(long_data)
View(dplyr::filter(long_data, long_data$Frequency != valuescsv$Frequency))
View(dplyr::filter(long_data, long_data$Source != valuescsv$Source))
unique(dplyr::filter(long_data, long_data$Source != valuescsv$Source)$ParameterID)
contextscsv$Source[contextscsv$Glottocode == glot]
align_contextscsv
align_contextscsv$Source
contextscsv
contextscsv<-align_contextscsv
gsub('\\[([^;]+)\\]',':\\1',contextscsv$Source)
unique(dplyr::filter(long_data, long_data$Source != valuescsv$Source)$ParameterID)
"morgan1992kutenai[10-11]"
gsub('\\[([^;]+)\\]',':\\1',"morgan1992kutenai[10-11]")
gsub('(.*)\\[[^;]+\\]',':\\1',"morgan1992kutenai[10-11]")
gsub('(.*)\\[[^;]+\\]','\\1',"morgan1992kutenai[10-11]")
gsub('.*\\[([^;]+)\\]','\\1', "morgan1992kutenai[10-11]", perl=TRUE)
source('cldf-functions.R')
source('utils.R')
source('nounposs.R')
source('lat.R')
source('veluv.R')
source('glot.R')
source('cor.R')
source('toneprom.R')
source('syll.R')
source('ppron.R')
source('sgpl.R')
source('monpl.R')
source('wo.R')
source('attr.R')
source('gend.R')
source('soccaus.R')
source('dem.R')
source('appr.R')
source('nounposs.R')
source('align.R')
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
source('cldf-functions.R')
source('utils.R')
source('nounposs.R')
source('lat.R')
source('veluv.R')
source('glot.R')
source('cor.R')
source('toneprom.R')
source('syll.R')
source('ppron.R')
source('sgpl.R')
source('monpl.R')
source('wo.R')
source('attr.R')
source('gend.R')
source('soccaus.R')
source('dem.R')
source('appr.R')
source('nounposs.R')
source('align.R')
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, warnings, errors)
wide_no_derived <- processApprehensional(wide_no_derived, warnings, errors)
# TODO process sources differently, : vs []
# make everything a character
wide_no_derived <- wide_no_derived %>% mutate(across(everything(), as.character))
# process for errors, reformat and write out
globalPreprocess(wide_no_derived, warnings, errors)
# TODO left off here
long_data <- convertToLong(wide_no_derived, codescsv)
long_data <- long_data[order(long_data$ID),]
valuescsv <- valuescsv[order(valuescsv$ID),]
all.equal(valuescsv, long_data, check.attributes = FALSE)
View(dplyr::filter(long_data, long_data$Frequency != valuescsv$Frequency))
View(dplyr::filter(long_data, long_data$Source != valuescsv$Source))
unique(dplyr::filter(long_data, long_data$Source != valuescsv$Source)$ParameterID)
source('cldf-functions.R')
source('utils.R')
source('nounposs.R')
source('lat.R')
source('veluv.R')
source('glot.R')
source('cor.R')
source('toneprom.R')
source('syll.R')
source('ppron.R')
source('sgpl.R')
source('monpl.R')
source('wo.R')
source('attr.R')
source('gend.R')
source('soccaus.R')
source('dem.R')
source('appr.R')
source('nounposs.R')
source('align.R')
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(sgplloc, check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
#wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, warnings, errors)
wide_no_derived <- processApprehensional(wide_no_derived, warnings, errors)
# TODO process sources differently, : vs []
# make everything a character
wide_no_derived <- wide_no_derived %>% mutate(across(everything(), as.character))
# process for errors, reformat and write out
globalPreprocess(wide_no_derived, warnings, errors)
# TODO left off here
long_data <- convertToLong(wide_no_derived, codescsv)
long_data <- long_data[order(long_data$ID),]
valuescsv <- valuescsv[order(valuescsv$ID),]
all.equal(valuescsv, long_data, check.attributes = FALSE)
View(dplyr::filter(long_data, long_data$Source != valuescsv$Source))
valuescsv$Source[valuescsv$ID=='cata1286_Align-07']
valuescsv$Source[valuescsv$ID=='coah1252_Align-07']
View(dplyr::filter(long_data, long_data$Coder != valuescsv$Coder))
long_data$CodeID[long_data$ID=="abkh1244_Lat-01a"]
valuescsv$CodeID[valuescsv$ID=="abkh1244_Lat-01a"]
long_data$Coder[long_data$ID=="abkh1244_Lat-01a"]
valuescsv$Coder[valuescsv$ID=="abkh1244_Lat-01a"]
