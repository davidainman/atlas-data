defaultmaxmorphs <- morphnum
}
if (morphnum < defaultminmorphs) {
defaultminmorphs <- morphnum
}
}
if (type == "Inalienable") {
inalienablecxs <- inalienablecxs + 1
if (is.na(inalmaxmorphs)) {
inalmaxmorphs <- morphnum
inalminmorphs <- morphnum
}
if (morphnum > inalmaxmorphs) {
inalmaxmorphs <- morphnum
}
if (morphnum < inalminmorphs) {
inalminmorphs <- morphnum
}
}
}
}
if (!is.na(defaultmaxmorphs) & !is.na(inalmaxmorphs)) {
if ((inalmaxmorphs > defaultmaxmorphs) | (inalminmorphs > defaultminmorphs)) {
inalmore <- c(inalmore, glotto)
}
} else { untestable <- c(untestable, glotto) }
}
return(list("untestable" = untestable, "inalienable.more" = inalmore))
}
withinLanguageNonpossessibleMorphologyTest <- function(sample, languages, classes, constructions) {
untestable <- c()
nonpossless <- c()
for (glotto in sample) {
glottoconstructions <- dplyr::filter(constructions, Glottocode == glotto)
defaultmaxmorphs <- NA
defaultminmorphs <- NA
nonpossmaxmorphs <- NA
nonpossminmorphs <- NA
for (nounclass in classes$ID[classes$Glottocode == glotto]) {
type <- classes$dd_Semantic_Type[classes$Glottocode == glotto & classes$ID == nounclass]
for (conname in dplyr::filter(glottoconstructions, grepl(paste0(nounclass, "(;|$)"), Class_ID) & dd_Construction_Directness == "DIRECT" & Construction_Type != "PRO_MARKER")$ID) {
if (constructions$Construction_Type[constructions$ID == conname] == "JUXT") {
morphnum <- 0
}
else {
morphnum <- str_count(constructions$Construction_Type[constructions$ID == conname], "\\+") + 1
}
if (type == "Default") {
defaultcxs <- defaultcxs + 1
if (is.na(defaultmaxmorphs)) {
defaultmaxmorphs <- morphnum
defaultminmorphs <- morphnum
}
if (morphnum > defaultmaxmorphs) {
defaultmaxmorphs <- morphnum
}
if (morphnum < defaultminmorphs) {
defaultminmorphs <- morphnum
}
}
if (type == "Non-possessible") {
nonpossessiblecxs <- nonpossessiblecxs + 1
if (is.na(nonpossmaxmorphs)) {
nonpossmaxmorphs <- morphnum
nonpossminmorphs <- morphnum
}
if (morphnum > nonpossmaxmorphs) {
nonpossmaxmorphs <- morphnum
}
if (morphnum < nonpossminmorphs) {
nonpossminmorphs <- morphnum
}
}
}
}
if (!is.na(defaultmaxmorphs) & !is.na(nonpossmaxmorphs)) {
if ((nonpossmaxmorphs < defaultmaxmorphs) | (nonpossminmorphs < defaultminmorphs)) {
nonpossless <- c(nonpossless, glotto)
}
} else { untestable <- c(untestable, glotto) }
}
return(list("untestable" = untestable, "nonpossessible.less" = nonpossless))
}
runWithinLanguageInalienableMorphologyTests <- function(blacklist, languages, classes, constructions) {
p_values <- c()
passes <- c()
for (i in 1:100) {
sample <- generateWithinLanguageSample(dplyr::filter(languages, !(Glottocode %in% blacklist)))
output <- withinLanguageInalienableMorphologyTest(sample, languages, classes, constructions)
bt <- binom.test(length(sample)-length(output$inalienable.more), length(sample), 0.5, alternative="greater")
p_values <- c(p_values, bt$p.value)
passes <- c(passes, bt$p.value < 0.01)
}
}
runWithinLanguageNonpossessibleMorphologyTests <- function(blacklist, languages, classes, constructions) {
p_values <- c()
passes <- c()
for (i in 1:100) {
sample <- generateWithinLanguageSample(dplyr::filter(languages, !(Glottocode %in% blacklist)))
output <- withinLanguageNonpossessibleMorphologyTest(sample, languages, classes, constructions)
bt <- binom.test(length(sample)-length(output$nonpossessible.less), length(sample), 0.5, alternative="greater")
p_values <- c(p_values, bt$p.value)
passes <- c(passes, bt$p.value < 0.05)
}
}
crossLinguisticMorphologyTest <- function(samples, languages, classes, constructions) {
nonpossmorphemes <- c()
inalmorphemes <- c()
defaultmorphemes <- c()
for (id in samples$nonposs) {
if (constructions$dd_Construction_Directness[constructions$ID == id] == "DIRECT") {
if (constructions$Construction_Type[constructions$ID == id] == "JUXT") {
nonpossmorphemes <- c(nonpossmorphemes, 0)
} else {
nonpossmorphemes <- c(nonpossmorphemes, str_count(constructions$Construction_Type[constructions$ID == id], "\\+") + 1)
}
}
}
for (id in samples$inal) {
if (constructions$Construction_Type[constructions$ID == id] == "JUXT") {
inalmorphemes <- c(inalmorphemes, 0)
} else {
inalmorphemes <- c(inalmorphemes, str_count(constructions$Construction_Type[constructions$ID == id], "\\+") + 1)
}
}
for (id in samples$default) {
if (constructions$Construction_Type[constructions$ID == id] == "JUXT") {
defaultmorphemes <- c(defaultmorphemes, 0)
} else {
defaultmorphemes <- c(defaultmorphemes, str_count(constructions$Construction_Type[constructions$ID == id], "\\+") + 1)
}
}
return(list("nonposs" = nonpossmorphemes, "inal" = inalmorphemes, "default" = defaultmorphemes))
}
runCrossLinguisitcMorphologyTests <- function(languages, classes, constructions) {
p_values <- c()
passes <- c()
for (i in 1:100) {
samples <- generateCrossLinguisticSample(languages, classes, constructions)
output <- crossLinguisticMorphologyTest(samples, languages, classes, constructions)
ks <- ks.test(output$default, output$inal, alternative = "greater", exact = NULL, simulate.p.value = TRUE, B = 2000)
p_values <- c(p_values, ks$p.value)
passes <- c(passes, ks$p.value < 0.05)
}
}
defaultclasses <- 0
inalienableclasses <-0
nonpossessibleclasses <-0
defaultunposs <- 0
inalienableunposs <- 0
nonpossessibleunposs <- 0
defaultsupp <- 0
defaultdirect <- 0
defaultclass <- 0
defaultclause <- 0
defaultnoposs <- 0
inalienablesupp <- 0
inalienabledirect <- 0
inalienableclass <- 0
inalienableclause <- 0
inalienablenoposs <- 0
nonpossessiblesupp <- 0
nonpossessibledirect <- 0
nonpossessibleclass <- 0
nonpossessibleclause <- 0
nonpossessiblenoposs <- 0
for (class in classes$ID) {
type <- classes$dd_Semantic_Type[classes$ID == class]
cxs <- unique(constructions$ID[grepl(paste0('(^|\\s|;)',class,'($|\\s|;)'), constructions$Class_ID)])
if (type == "Default") {
defaultclasses <- defaultclasses + 1
supp <- 0
unposs <- 0
direct <- 0
cls <- 0
clause <- 0
noposs <- 0
for (cx in cxs) {
if (constructions$Construction_Type[constructions$ID == cx] == "SUPPLETION") {
supp <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "UNPOSSESSION") {
unposs <- 1
}
if (constructions$dd_Construction_Directness[constructions$ID == cx] == "DIRECT") {
direct <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "CLASS") {
cls <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "CLAUSE") {
clause <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "POSSESSION" & constructions$Construction_Form[constructions$ID == cx] == "NULL") {
noposs <- 1
}
}
defaultsupp <- defaultsupp + supp
defaultunposs <- defaultunposs + unposs
defaultdirect <- defaultdirect + direct
defaultclass  <- defaultclass + cls
defaultclause <- defaultclause + clause
defaultnoposs <- defaultnoposs + noposs
}
if (type == "Inalienable") {
inalienableclasses <- inalienableclasses + 1
supp <- 0
unposs <- 0
direct <- 0
cls <- 0
clause <- 0
noposs <- 0
for (cx in cxs) {
if (constructions$Construction_Type[constructions$ID == cx] == "SUPPLETION") {
supp <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "UNPOSSESSION") {
unposs <- 1
}
if (constructions$dd_Construction_Directness[constructions$ID == cx] == "DIRECT") {
direct <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "CLASS") {
cls <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "CLAUSE") {
clause <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "POSSESSION" & constructions$Construction_Form[constructions$ID == cx] == "NULL") {
noposs <- 1
}
}
inalienablesupp <- inalienablesupp + supp
inalienableunposs <- inalienableunposs + unposs
inalienabledirect <- inalienabledirect + direct
inalienableclass  <- inalienableclass + cls
inalienableclause <- inalienableclause + clause
inalienablenoposs <- inalienablenoposs + noposs
}
if (type == "Non-possessible") {
nonpossessibleclasses <- nonpossessibleclasses + 1
supp <- 0
unposs <- 0
direct <- 0
cls <- 0
clause <- 0
noposs <- 0
for (cx in cxs) {
if (constructions$Construction_Type[constructions$ID == cx] == "SUPPLETION") {
supp <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "UNPOSSESSION") {
unposs <- 1
}
if (constructions$dd_Construction_Directness[constructions$ID == cx] == "DIRECT") {
direct <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "CLASS") {
cls <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "CLAUSE") {
clause <- 1
}
if (constructions$Construction_Type[constructions$ID == cx] == "POSSESSION" & constructions$Construction_Form[constructions$ID == cx] == "NULL") {
noposs <- 1
}
}
nonpossessiblesupp <- nonpossessiblesupp + supp
nonpossessibleunposs <- nonpossessibleunposs + unposs
nonpossessibledirect <- nonpossessibledirect + direct
nonpossessibleclass  <- nonpossessibleclass + cls
nonpossessibleclause <- nonpossessibleclause + clause
nonpossessiblenoposs <- nonpossessiblenoposs + noposs
}
}
gsub(" \\(.*\\)","", "A (apprehensive)")
featurestable
gsub(" \\(.*\\)","", featurestable$`Appr-12`)
featurestable$`Appr-12`
suppressPackageStartupMessages(library(argparse))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(tibble))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(rje))
options(warn=-1)
source('utils.R')
source('nounposs.R')
source('lat.R')
source('veluv.R')
source('glot.R')
source('cor.R')
source('toneprom.R')
source('syll.R')
source('ppron.R')
source('sgpl.R')
source('monpl.R')
source('wo.R')
source('attr.R')
source('gend.R')
source('soccaus.R')
source('dem.R')
source('appr.R')
source('nounposs.R')
source('align.R')
# output errors and warnings, preserving comments
writeErrorsandWarnings <- function(warnings, errors, outputloc) {
if (nrow(errors) > 0) {
oldErrors <- read.csv(paste0(outputloc, '/main-errors.csv'), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
newErrors <- right_join(oldErrors %>% select(-c("Coder")), errors, by = c('Feature', 'Language', 'Glottocode', 'ErrorText'))
newErrors <- newErrors[, names(oldErrors)]
} else {
newErrors <- errors
}
oldWarnings <- read.csv(paste0(outputloc, '/main-warnings.csv'), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
newWarnings <- right_join(oldWarnings %>% select(-c("Coder")), warnings, by = c('Feature', 'Language', 'Glottocode', 'WarningText'))
newWarnings <- newWarnings[, names(oldWarnings)]
write.csv(newErrors, paste0(outputloc, '/main-errors.csv'), na="", row.names=FALSE)
write.csv(newWarnings, paste0(outputloc, '/main-warnings.csv'), na="", row.names=FALSE)
}
validateValues <- function(features, codescsv, errors) {
errorrows = data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
for (sn in unique(codescsv$ParameterID)) {
validValues <- unique(subset(codescsv, ParameterID == sn)$Description) %>% append('?') %>% append(NA)
if ('_number_' %in% validValues) {
invalids <- subset(features, !(features[[sn]] %in% validValues) & !grepl('[[:digit:]]', features[[sn]]) & features[[sn]] != '?' & !is.na(features[[sn]]) & features$glottocode != 'question')
} else {
invalids <- subset(features, !(features[[sn]] %in% validValues) & features[[sn]] != '?' & !is.na(features[[sn]]) & features$glottocode != 'question')
}
# split apart by ';' and regularize '&' sets, if they are present
if (nrow(invalids) != 0) {
fakeinvalids <- c()
for (i in 1:nrow(invalids)) {
invalid <- invalids[i,][[sn]]
if (grepl(';', invalid)) {
trueinvalids <- c()
for (value in unlist(strsplit(invalid, ';'))) {
value <- trimws(value)
if (sn == 'MonPl-06') {
value <- compactMonPl(explodeMonPl(value))
} else if (grepl('&', value)) {
value <- regularizeAmpersand(value)
}
if (!(value %in% validValues)) {
trueinvalids <- c(trueinvalids, invalid)
}
}
if (length(trueinvalids) != 0) {
for (trueinvalid in trueinvalids) {
trueinvalidrow <- invalids[i,]
trueinvalidrow[[sn]] <- paste('List element:', trueinvalid)
invalids <- rbind(invalids, trueinvalidrow)
}
}
fakeinvalids <- c(fakeinvalids, i)
} else if (grepl('&', invalid)) { # & and no ;
if (sn == 'MonPl-06') {
regularized <- compactMonPl(explodeMonPl(invalid))
} else {
regularized <- regularizeAmpersand(invalid)
}
if (regularized %in% validValues) {
fakeinvalids <- c(fakeinvalids, i)
}
}
}
if (length(fakeinvalids) > 0) {
invalids <- invalids[-c(fakeinvalids),]
}
}
for (name in invalids$name) {
errorrows[nrow(errorrows) +1, ] = c(sn, name, invalids$glottocode[invalids$name == name], invalids[[paste0(gsub('\\..*', '', sn), '.coder')]][invalids$name == name], paste0('Unexpected value: ', invalids[[sn]][invalids$name == name]))
}
}
#write warnings, errors, to global variable
errorobj <- deparse(substitute(errors))
assign(errorobj, value = rbindlist(list(errors, errorrows)), envir = parent.frame())
}
# check for sources across all features
globalPreprocess <- function(featurestable, warnings, errors) {
questions <- colnames(featurestable)[grepl("[A-z]+\\-\\d+[A-z]*$",colnames(featurestable))]
#errors
errorsInt <- errors
errorrows = data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
#check for the existence of a source
for (question in questions) {
source = paste0(question, '-Source')
errorsList <- dplyr::filter(featurestable, is.na(source))
addErrorsOrWarnings('Error', errorsList, errorsInt, gsub('\\..*', '', question), paste0('Missing value for source ',  question))
}
#write warnings, errors, to global variable
errorobj <- deparse(substitute(errors))
assign(errorobj, value = errorsInt, envir = parent.frame())
}
maincldfloc
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
parameterscsv <- read.csv(paste0(maincldfloc, "/parameters.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
sgplverbs <- read.csv(paste0(sgplloc, "/verbs.csv"), check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
wide_no_derived <- processLaterals(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, lgnames, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, lgnames, warnings, errors)
warnings <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'WarningText'))))
errors   <- data.table(matrix(ncol=5,nrow=0, dimnames=list(NULL, c('Feature', 'Language', 'Glottocode', 'Coder', 'ErrorText'))))
# read csv files
# main database
valuescsv <- read.csv(paste0(maincldfloc, "/values.csv"), na.strings = c(), colClasses = c("character"), stringsAsFactors = FALSE)
languagescsv <- read.csv(paste0(maincldfloc, "/languages.csv"), na.strings = c(), stringsAsFactors = FALSE)
parameterscsv <- read.csv(paste0(maincldfloc, "/parameters.csv"), na.strings = c(), stringsAsFactors = FALSE)
codescsv <- read.csv(paste0(maincldfloc, "/codes.csv"), na.strings = c(), stringsAsFactors = FALSE)
# sg-pl verbs
sgplverbs <- read.csv(paste0(sgplloc, "/verbs.csv"), check.names = FALSE, stringsAsFactors = FALSE)
# noun possession data
nounposs_classescsv <- read.csv(paste0(possessioncldfloc, "/classes.csv"), na.strings = c(), stringsAsFactors = FALSE)
nounposs_constructionscsv <- read.csv(paste0(possessioncldfloc, "/constructions.csv"), na.strings = c(), stringsAsFactors = FALSE)
# alignment data
align_contextscsv   <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/contexts.csv'))
align_selectorscsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/selectors.csv'))
align_languagescsv  <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/languages.csv'))
align_referencescsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/references.csv'))
align_domscsv <- read.csv(paste0(alignmentcldfloc, '/generic-cldf/doms.csv'))
align_valuescsv <- read.csv(paste0(alignmentcldfloc, '/structure-cldf/values.csv'))
lgnames <- dplyr::select(languagescsv, c('Glottocode','Name'))
# drop all derived questions
wide_data <- convertToWide(valuescsv)
# add lg names
wide_data <- merge(languagescsv[,c("Glottocode", "Name")], wide_data, by.x="Glottocode", by.y="LanguageID")
# remove derived questions (+ align, nounposs)
derived_qs <- colnames(wide_data)[grepl('[[:digit:]]+[[:alpha:]]',colnames(wide_data))]
align_qs <- colnames(wide_data)[grepl('Align',colnames(wide_data))]
poss_qs <- colnames(wide_data)[grepl('NounPoss',colnames(wide_data))]
wide_no_derived <- dplyr::select(wide_data, -one_of(derived_qs, align_qs, poss_qs))
# generate NounPoss questions
wide_no_derived <- processNounPoss(wide_no_derived, nounposs_classescsv, nounposs_constructionscsv, possessioncldfloc, lgnames, warnings, errors)
# generate Align questions
wide_no_derived <- processAlignment(wide_no_derived, align_languagescsv, align_contextscsv, align_selectorscsv, align_referencescsv, align_domscsv, align_valuescsv)
# generate other derived questions
wide_no_derived <- processLaterals(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processVeluv(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processGlottalized(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processCoronals(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processToneProm(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processSyllable(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processPronouns(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processSgPl(wide_no_derived, sgplverbs, lgnames, warnings, errors)
wide_no_derived <- processMonPl(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processWordOrder(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processGenderlects(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processSocCaus(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processDemonstratives(wide_no_derived, lgnames, warnings, errors)
wide_no_derived <- processAttributives(wide_no_derived, lgnames, warnings, errors)
featurestable <- wide_no_derived
ifelse(featurestable$`Appr-12` == 'NA', 'NA',
ifelse(featurestable$`Appr-12` == '?', '?',
str_count(gsub(" \\(.*\\)","", featurestable$`Appr-12`), ';;') + 1))
gsub(" \\(.*\\)","", featurestable$`Appr-12`)
sapply(gsub(" \\(.*\\)","", featurestable$`Appr-12`), function(x) paste0(unique(trimws(unlist(strsplit(x, ';;|&')))), collapse=';;'))))
ifelse(featurestable$`Appr-01` == 'no', 'NA',
ifelse(featurestable$`Appr-12` == '?', '?',
sapply(gsub(" \\(.*\\)","", featurestable$`Appr-12`), function(x) paste0(unique(trimws(unlist(strsplit(x, ';;|&')))), collapse=';;'))))
ifelse(featurestable$`Appr-01` == 'no', 'NA',
ifelse(featurestable$`Appr-12` == '?', '?',
sapply(gsub(" \\(.*\\)","", featurestable$`Appr-12`), function(x) paste0(unique(trimws(unlist(strsplit(x, ';;|&')))), collapse=';;'))))
featurestable$`Appr-12`[featurestable$Glottocode == "esee1248"]
gsub(" \\(apprehensive|precautioning|timitive\\)","", "A (apprehensive);;P (precautioning);;T (timitive)")
gsub(" \\((apprehensive)|(precautioning)|(timitive)\\)","", "A (apprehensive);;P (precautioning);;T (timitive)")
gsub(" \\(apprehensive\\)|\\(precautioning\\)|\\(timitive\\)","", "A (apprehensive);;P (precautioning);;T (timitive)")
gsub(" \\(apprehensive\\)| \\(precautioning\\)| \\(timitive\\)","", "A (apprehensive);;P (precautioning);;T (timitive)")
featurestable$`Appr-01`[featurestable$Glottocode == "kuot1243"]
featurestable$`Appr-12`[featurestable$Glottocode == "kuot1243"]
sapply(gsub(" \\(apprehensive\\)| \\(precautioning\\)| \\(timitive\\)","", featurestable$`Appr-12`[featurestable$Glottocode == "kuot1243"]), function(x) paste0(unique(trimws(unlist(strsplit(x, ';;|&')))), collapse=';;')
)
sapply(gsub(" \\(apprehensive\\)| \\(precautioning\\)| \\(timitive\\)","", featurestable$`Appr-12`[featurestable$Glottocode == "kuot1243"]), function(x) paste0(unique(trimws(unlist(strsplit(x, ';;|&')))), collapse=';;'))
gsub(" \\(apprehensive\\)| \\(precautioning\\)| \\(timitive\\)","", featurestable$`Appr-12`[featurestable$Glottocode == "kuot1243"])
